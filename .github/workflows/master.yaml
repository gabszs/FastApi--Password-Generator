name: Production-Pipeline-SWR-CCI

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

env:
  CLOUD_REGION: sa-brazil-1
  SWR_ORGANIZATION: devopsbrdev
  IMAGE_NAME: password-generator
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:   
  push-to-dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11.1"

      - name: Install Poetry
        run: pipx install poetry

      - name: Get Version from pyproject.toml
        id: get-version
        run: |
          VERSION=$(poetry version --short)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"

      - name: Build Docker Image
        id: build-image
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .

      - name: Docker Hub Login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: docker images
        run: docker images

      - name: Tag and Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }} --all-tags

  Update-Image-Tag-in-Deployment:
    runs-on: ubuntu-latest
    needs: [push-to-dockerhub]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 
        with:
          token: ${{ secrets.MODIFY_TOKEN }}
          fetch-depth: 0

      - name: Install Poetry
        run: pipx install poetry

      - name: Get Version from pyproject.toml
        id: get-version
        run: |
          VERSION=$(poetry version --short)
          echo "NEW_IMAGE_TAG=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=new_version::${VERSION}"

      - name: Checkout GitOps Branch
        run: |
          git fetch origin
          git checkout gitops

      - name: Update Image Tag in Deployment
        run: |
          sed -i "s|image: gabzsz/password-generator:.*|image: gabzsz/password-generator:${{ env.NEW_IMAGE_TAG }}|" k8s/deployment.yaml

      - name: Git Config
        run: |
          git config --global user.email "ci-bot@ci.com"
          git config --global user.name "CI Bot"

      - name: Commit and Push Changes
        run: |
          git add k8s/deployment.yaml
          git commit -m "Updating the image tag: ${NEW_IMAGE_TAG}"
          git push origin gitops